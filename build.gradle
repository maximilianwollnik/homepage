/*
 * Copyright (c) 2023, Maximilian Wollnik, All rights reserved.
 */

plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'de.maximilianwollnik'
sourceCompatibility = "19"

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2022.0.1")
    set('asciidoctorjVersion', "2.5.7")
    set('asciidoctorjPdfVersion', "2.3.4")
    set('commonsioVersion', "2.11.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "commons-io:commons-io:${commonsioVersion}"

    implementation "org.asciidoctor:asciidoctorj:${asciidoctorjVersion}"
    implementation "org.asciidoctor:asciidoctorj-pdf:${asciidoctorjPdfVersion}"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

task('installWebapp', group: 'build setup') {
    doLast {
        exec {
            workingDir 'src/main/frontend'
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cmd', '/c', 'npm', 'install'
            } else {
                commandLine 'npm', 'install'
            }
        }
    }
}

task('buildWebapp', group: 'build', dependsOn: 'installWebapp') {
    doLast {
        exec {
            workingDir 'src/main/frontend'
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cmd', '/c', 'npm', 'run', 'build'
            } else {
                commandLine 'npm', 'run', 'build'
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

springBoot {
    buildInfo()
}

bootJar.dependsOn buildWebapp
//bootRun.dependsOn buildWebapp
